# Based on CMakeLists.txt found in https://github.com/wjakob/instant-meshes

cmake_minimum_required (VERSION 2.8.3)
project(pbsproject)

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to 'Release' as none was specified.")
  set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build." FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release"
    "MinSizeRel" "RelWithDebInfo")
endif()
string(TOUPPER "${CMAKE_BUILD_TYPE}" U_CMAKE_BUILD_TYPE)

if(NOT IS_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/ext/nanogui/ext/glfw")
  message(FATAL_ERROR "The dependency repositories (NanoGUI, GLFW, etc.) are missing! "
    "You probably did not clone the project with --recursive. It is possible to recover "
    "by calling \"git submodule update --init --recursive\"")
endif()

# Sanitize build environment for static build with C++11
if (MSVC)
  add_definitions (/D "_CRT_SECURE_NO_WARNINGS")
  add_definitions (/D "__TBB_NO_IMPLICIT_LINKAGE")

  # Parallel build on MSVC (all targets)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")

  if (NOT CMAKE_SIZEOF_VOID_P EQUAL 8)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:SSE2")

    # Disable Eigen vectorization for Windows 32 bit builds (issues with unaligned access segfaults)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /DDEIGEN_DONT_VECTORIZE /DEIGEN_DISABLE_UNALIGNED_ARRAY_ASSERT")
  endif()

  # Static build
  set(CompilerFlags
        CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE
        CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO
        CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE
        CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO)
  foreach(CompilerFlag ${CompilerFlags})
    string(REPLACE "/MD" "/MT" ${CompilerFlag} "${${CompilerFlag}}")
  endforeach()
elseif(UNIX)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

  if (APPLE)
    # Try to auto-detect a suitable SDK
    execute_process(COMMAND bash -c "xcodebuild -version -sdk | grep MacOSX | grep Path | head -n 1 | cut -f 2 -d ' '" OUTPUT_VARIABLE CMAKE_OSX_SYSROOT)
    string(REGEX REPLACE "(\r?\n)+$" "" CMAKE_OSX_SYSROOT "${CMAKE_OSX_SYSROOT}")
    string(REGEX REPLACE "^.*X([0-9.]*).sdk$" "\\1" CMAKE_OSX_DEPLOYMENT_TARGET "${CMAKE_OSX_SYSROOT}")
  endif()
endif()

# Compile with compiler warnings
if(MSVC)
  if(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
    string(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
  endif()
else()
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-unused-parameter -Wno-unused-function")
  if (APPLE)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-gnu-anonymous-struct -Wno-c99-extensions -Wno-nested-anon-types")
  endif()
endif()

# Build NanoGUI
set(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL " " FORCE)
set(NANOGUI_BUILD_SHARED  OFF CACHE BOOL " " FORCE)
set(NANOGUI_BUILD_PYTHON  OFF CACHE BOOL " " FORCE)
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/ext/nanogui ext_build/nanogui)

# Build TBB
set(TBB_BUILD_STATIC ON CACHE BOOL " " FORCE)
set(TBB_BUILD_SHARED OFF CACHE BOOL " " FORCE)
set(TBB_BUILD_TBBMALLOC OFF CACHE BOOL " " FORCE)
set(TBB_BUILD_TBBMALLOC_PROXY OFF CACHE BOOL " " FORCE)
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/ext/tbb ext_build/tbb)

include_directories(
  # Source
  ${CMAKE_CURRENT_SOURCE_DIR}/src
  # Eigen
  ${CMAKE_CURRENT_SOURCE_DIR}/ext/nanogui/ext/eigen
  # GLFW
  ${CMAKE_CURRENT_SOURCE_DIR}/ext/nanogui/ext/glfw/include
  # GLEW
  ${CMAKE_CURRENT_SOURCE_DIR}/ext/nanogui/ext/glew/include
  # NanoVG
  ${CMAKE_CURRENT_SOURCE_DIR}/ext/nanogui/ext/nanovg/src
  # NanoGUI
  ${CMAKE_CURRENT_SOURCE_DIR}/ext/nanogui/include
  # Intel Thread Building Blocks
  ${CMAKE_CURRENT_SOURCE_DIR}/ext/tbb/include
  # Filesystem
  ${CMAKE_CURRENT_SOURCE_DIR}/ext/filesystem
  # Pseudorandom number generator
  ${CMAKE_CURRENT_SOURCE_DIR}/ext/pcg32
  # ${CMAKE_CURRENT_SOURCE_DIR}/ext/half
  # Tinyformat
  ${CMAKE_CURRENT_SOURCE_DIR}/ext/tinyformat
  # cxxopts
  ${CMAKE_CURRENT_SOURCE_DIR}/ext/cxxopts
  # stb
  ${CMAKE_CURRENT_SOURCE_DIR}/ext/stb
  # json11
  ${CMAKE_CURRENT_SOURCE_DIR}/ext/json11
  # tinydir
  ${CMAKE_CURRENT_SOURCE_DIR}/ext/tinydir
  # libexecstream
  ${CMAKE_CURRENT_SOURCE_DIR}/ext/libexecstream
  # Resource file
  ${CMAKE_CURRENT_BINARY_DIR}
)

# # Run bin2c on resource files
# set(PNG_FILES
#   ${CMAKE_CURRENT_SOURCE_DIR}/resources/comb.png
#   ${CMAKE_CURRENT_SOURCE_DIR}/resources/delete_stroke.png
#   ${CMAKE_CURRENT_SOURCE_DIR}/resources/loadmesh.png
#   ${CMAKE_CURRENT_SOURCE_DIR}/resources/scare.png
#   ${CMAKE_CURRENT_SOURCE_DIR}/resources/sing_dir.png
#   ${CMAKE_CURRENT_SOURCE_DIR}/resources/sing_pos.png
#   ${CMAKE_CURRENT_SOURCE_DIR}/resources/instantmeshes.png)
# file(GLOB FRAG_FILES "${CMAKE_CURRENT_SOURCE_DIR}/resources/*.frag")
# file(GLOB VERT_FILES "${CMAKE_CURRENT_SOURCE_DIR}/resources/*.vert")
# file(GLOB GEO_FILES  "${CMAKE_CURRENT_SOURCE_DIR}/resources/*.geo")
# set(BIN2C_CMDLINE resources.cpp resources.h)
# foreach(file ${PNG_FILES} ${FRAG_FILES} ${VERT_FILES} ${GEO_FILES})
#   list(APPEND BIN2C_CMDLINE ${file})
# endforeach()

# Create config file and add to include directories
configure_file("${PROJECT_SOURCE_DIR}/src/app/Config.h.in" "${PROJECT_BINARY_DIR}/Config.h")
include_directories(${PROJECT_BINARY_DIR})

set(EXTRA_SOURCE "")
if (APPLE)
  # set(EXTRA_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/resources/im.icns")
endif()

add_custom_command(
  OUTPUT resources.cpp resources.h
  COMMAND bin2c ARGS ${BIN2C_CMDLINE}
  DEPENDS bin2c ${resources}
  COMMENT "Running bin2c"
  PRE_BUILD VERBATIM
)

add_library(fluid STATIC
  
  src/utils/Math.h
  src/utils/Exception.h
  src/utils/StringUtils.h
  src/utils/ConcurrentUtils.h
 
  src/basics/AlignedAllocator.h
  src/basics/Box.h
  src/basics/Common.h 
  src/basics/DebugMonitor.h src/basics/DebugMonitor.cpp
  src/basics/Properties.h src/basics/Properties.cpp
  src/basics/Timer.h
  src/basics/Vector.h

  src/geo/MarchingCubes.h src/geo/MarchingCubes.cpp
  src/geo/Mesh.h src/geo/Mesh.cpp
  src/geo/ObjReader.h src/geo/ObjReader.cpp
  src/geo/ParticleGenerator.h src/geo/ParticleGenerator.cpp
  src/geo/ParticleMesher.h src/geo/ParticleMesher.cpp
  src/geo/SDF.h src/geo/SDF.cpp
  src/geo/VoxelGrid.h
  src/geo/Voxelizer.h src/geo/Voxelizer.cpp

  src/render/Camera.h
  src/render/Painter.h
  
  src/algorithm/Engine.h src/algorithm/Engine.cpp
  src/algorithm/Grid.h
  src/algorithm/Kernel.h
  src/algorithm/Scene.h src/algorithm/Scene.cpp
  src/algorithm/SPH.h src/algorithm/SPH.cpp

  ext/stb/stb_image_write.cpp
  ext/json11/json11.cpp
  ext/libexecstream/exec-stream.cpp
  ${EXTRA_SOURCE}
)
target_link_libraries(fluid tbb_static nanogui ${NANOGUI_EXTRA_LIBS})

add_executable(viewer #MACOSX_BUNDLE
  #resources.h resources.cpp
  src/app/main.cpp
  src/app/Viewer.h src/app/Viewer.cpp
)
target_link_libraries(viewer fluid)

#set_target_properties(pbsproject PROPERTIES OUTPUT_NAME "PBS Project")

if (WIN32)
  # Quench some warnings on MSVC
  if (MSVC)
#    set_source_files_properties(ext/rply/rply.c PROPERTIES COMPILE_FLAGS "/wd4127")
  endif()
elseif (APPLE)
  # Build an application bundle on OSX
  # set_target_properties(pbsproject PROPERTIES MACOSX_BUNDLE_BUNDLE_NAME "Instant Meshes")
  # set_target_properties(pbsproject PROPERTIES MACOSX_BUNDLE_BUNDLE_GUI_IDENTIFIER "com.im.pbsproject")
  # set_target_properties(pbsproject PROPERTIES MACOSX_BUNDLE_ICON_FILE im.icns)
  # set_target_properties(pbsproject PROPERTIES MACOSX_BUNDLE_INFO_PLIST ${CMAKE_CURRENT_SOURCE_DIR}/resources/MacOSXBundleInfo.plist.in)
  # set_source_files_properties(resources/im.icns PROPERTIES MACOSX_PACKAGE_LOCATION "Resources")
else()
  # Insulate from a few types of ABI changes by statically linking against libgcc and libstdc++
  set_target_properties(viewer PROPERTIES LINK_FLAGS "-static-libgcc")
  #set_target_properties(pbsproject PROPERTIES LINK_FLAGS "-static-libgcc -static-libstdc++")
endif()

if (UNIX AND NOT ${U_CMAKE_BUILD_TYPE} MATCHES DEBUG)
  add_custom_command(TARGET pbsproject POST_BUILD COMMAND strip $<TARGET_FILE:pbsproject>)
endif()
